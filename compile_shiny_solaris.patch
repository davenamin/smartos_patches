commit 8a0e66f735e5607f101d426c233a40c39db183b9
Author: Daven Amin <daven.amin@outlook.com>
Date:   Tue Aug 4 14:31:37 2015 +0000

    hacky changes to get shiny to compile on Solaris (SmartOS)
    
    using patch from:
    https://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/kde-base/kdelibs/files/kdelibs-4.3.2-solaris-getgrouplist.patch

diff --git a/lib/worker/app-worker.js b/lib/worker/app-worker.js
index a7c575b..3b31bc5 100644
--- a/lib/worker/app-worker.js
+++ b/lib/worker/app-worker.js
@@ -149,8 +149,6 @@ var AppWorker = function(appSpec, endpoint, logStream, workerId, home) {
       mode = appSpec.settings.mode;
     }
 
-    if (!switchUser && permissions.isSuperuser())
-      throw new Error("Aborting attempt to launch R process as root");
 
     if (switchUser) {
       executable = 'su';
diff --git a/src/launcher.cc b/src/launcher.cc
index d8d04b6..85b1867 100644
--- a/src/launcher.cc
+++ b/src/launcher.cc
@@ -72,13 +72,19 @@ int main(int argc, char **argv) {
 // by calling readlink on /proc/<pid>/exe.
 int findBaseDir(std::string* shinyServerPath) {
 
+
+  #ifdef __sun
+    char execPath[MAXPATHLEN + 1];
+    strncpy(execPath,getexecname(),MAXPATHLEN+1);
+    realpath(execPath,execPath);
+    *shinyServerPath = dirname(dirname(execPath));
+  #else
   char execPath[MAXPATHLEN + 1];
   int cn = snprintf(execPath, MAXPATHLEN + 1, "/proc/%d/exe", getpid());
   if (cn < 0 || cn > MAXPATHLEN) {
     // Not expected
     return 2;
   }
-
   struct stat execStat;
   if (lstat(execPath, &execStat)) {
     if (errno == ENOENT)
@@ -110,5 +116,6 @@ int findBaseDir(std::string* shinyServerPath) {
 
   *shinyServerPath = dirname(dirname(execPath));
 
+  #endif
   return 0;
 }
diff --git a/src/posix.cc b/src/posix.cc
index 83fee64..eaa3ac9 100644
--- a/src/posix.cc
+++ b/src/posix.cc
@@ -19,6 +19,100 @@
 #include <pwd.h>
 #include <grp.h>
 #include <fcntl.h>
+/*-
+ * Copyright (c) 1991, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *	This product includes software developed by the University of
+ *	California, Berkeley and its contributors.
+ * 4. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#if 0
+#if defined(LIBC_SCCS) && !defined(lint)
+static char sccsid[] = "@(#)getgrouplist.c	8.2 (Berkeley) 12/8/94";
+#endif /* LIBC_SCCS and not lint */
+#include <sys/cdefs.h>
+__FBSDID("$FreeBSD: src/lib/libc/gen/getgrouplist.c,v 1.14 2005/05/03 16:20:03 delphij Exp $");
+#endif
+
+/*
+ * get credential
+ */
+#include <sys/types.h>
+
+#include <grp.h>
+#include <string.h>
+#include <unistd.h>
+int
+getgrouplist(const char *uname, gid_t agroup, gid_t *groups, int *grpcnt)
+{
+	const struct group *grp;
+	int i, maxgroups, ngroups, ret;
+
+	ret = 0;
+	ngroups = 0;
+	maxgroups = *grpcnt;
+	/*
+	 * When installing primary group, duplicate it;
+	 * the first element of groups is the effective gid
+	 * and will be overwritten when a setgid file is executed.
+	 */
+	groups ? groups[ngroups++] = agroup : ngroups++;
+	if (maxgroups > 1)
+		groups ? groups[ngroups++] = agroup : ngroups++;
+	/*
+	 * Scan the group file to find additional groups.
+	 */
+	setgrent();
+	while ((grp = getgrent()) != NULL) {
+		if (groups) {
+			for (i = 0; i < ngroups; i++) {
+				if (grp->gr_gid == groups[i])
+					goto skip;
+			}
+		}
+		for (i = 0; grp->gr_mem[i]; i++) {
+			if (!strcmp(grp->gr_mem[i], uname)) {
+				if (ngroups >= maxgroups) {
+					ret = -1;
+					break;
+				}
+				groups ? groups[ngroups++] = grp->gr_gid : ngroups++;
+				break;
+			}
+		}
+skip:
+		;
+	}
+	endgrent();
+	*grpcnt = ngroups;
+	return (ret);
+}
 
 using namespace node;
 using namespace v8;
@@ -121,11 +215,7 @@ Handle<Value> GetGroupList(const Arguments& args) {
     bufsize = 16384;
   char buf[bufsize];
 
-#ifdef __linux__
   typedef gid_t result_t;
-#else
-  typedef int result_t;
-#endif
 
   errno = 0;
   if ((err = getpwnam_r(*name, &pwd, buf, bufsize, &pwdp)) || pwdp == NULL) {
